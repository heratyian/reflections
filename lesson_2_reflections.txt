What happens when you initialize a repository?
Why do you need to do it?

    when you initialize a repository, git creates a .git file in the
    current directory. You need to do this before making commits.

How is the staging area different from the working directory
and the repository? What value do you think it offers?

    The staging area is for files to be committed. Add files that have
    been changed and logically make sense for the commit. Easier to track
    bugs later on.

How can you use the staging area to make sure you have one commit
per logical change?

    I can use git diff to see exactly what is being committed. I will only
    add files to the staging area that have code related to my current commit.
    This will make it easier to track future bugs.

What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

    When making major changes to the codebase, it is helpful to use a branch.
    This allows you to keep a working version, while trying out new
    experimental features.

How do the diagrams help you visualize the branch structure?

    Diagrams make it easier to visualize the relationship (parents)
    of each commit relative to other commits.

What is the result of merging two branches together?
Why do we represent it in the diagram the way we do?

    Git combines the two branches using the most recent commits on each branch
    and the most recent common ancestor commit. We represent it in the diagram
    this way to show a different branch going off and then returning to master.
