How did viewing a diff between two versions of a file
help you see the bug that was introduced?

    Viewing a diff between two versions helped pinpoint the line
    where there was a difference. It did not require me to sift
    through the entire files. Since this was a typo, find and replace
    would not work in this situation.

How could having easy access to the entire history of a file make
you a more efficient programmer in the long term?

    If I make a mistake and want to check out an older version,
    I do not have to re-write old code.

What do you think are the pros and cons of manually choosing when
to create a commit, like you do in Git, vs having versions automatically
saved, like Google Docs does?

    You can set the pace of commits and commit at places that make sense.
    This way, commits should always be compilable.

Why do you think some version control systems, like Git, allow saving
multiple files in one commit, while others, like Google Docs, treat
each file separately?

    Programmers often work with many interrelated files in a single
    project. Committing these together makes sense.


How can you use the commands git log and git diff to view the history
of files?

    git log shows the entire commit history
    git diff shows the specific differences between two commits

How might using version control make you more confident to make changes
that could break something?

    You can always revert back to a pre-broken state using version control

Now that you have your workspace set up, what do you want to try
using Git for?

    All my programming work. Especially open source on Git Hub.
